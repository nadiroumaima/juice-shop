name: "CI/CD Pipelines"
on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  security-events: write

jobs:
  snyk_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: "Install dependencies"
        run: npm install
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-results.sarif  
      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v3
        with:
            name: snyk-scan-results
            path: snyk-scan-results.json
        

  sonarqube_scan:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: snyk_scan
    steps:
    - name: Checking out
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Verify Java version
      run: java -version
      

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=nadiroumaima_juice-shop
          -Dsonar.organization=nadiroumaima
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io
          -X
    - name: Upload SonarQube Results
      uses: actions/upload-artifact@v3
      with:
        name: sonarqube-scan-results
        path: .scannerwork/sonar-report.json


  build:
    runs-on: ubuntu-latest
    needs: sonarqube_scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  
          password: ${{ secrets.DOCKER_TOKEN }}     

      - name: Build Docker image
        run: |
            docker build -t oumaima1702/test-content-nginx:latest .
  
      - name: Push Docker image
        run: |
            docker push oumaima1702/test-content-nginx:latest
  
  dast:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Pull Docker Image
      - name: Pull Docker Image
        run: docker pull oumaima1702/test-content-nginx:latest

      # Step 2: Create Docker Network
      - name: Create Docker Network
        run: docker network create zap-network

      # Step 3: Start Docker Container
      - name: Start Docker Container
        run: |
          docker run --network=zap-network --name test-app -d oumaima1702/test-content-nginx:latest
          sleep 30
      # Step 4: Run OWASP ZAP Full Scan
      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: "http://test-app:80"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Stop Docker Container
      - name: Stop and Remove Docker Container
        run: docker stop test-app && docker rm test-app

      # Step 6: Upload DAST Results
      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: snyk-scan-results
          path: snyk-results.sarif

  vulnerability_management:
    name: Vulnerability Management
    needs: dast
    runs-on: ubuntu-latest
    if: always()

    steps:

      - name: Download Snyk Results
        uses: actions/download-artifact@v3
        with:
            name: snyk-scan-results
            path: analysis-results/snyk


      - name: Download ZAP Results
        uses: actions/download-artifact@v4
        with:
          name: zap-scan-results
          path: analysis-results/zap

      
      
     

  redeploy:
    name: Redeploy Juice Shop App
    runs-on: ubuntu-latest
    needs: vulnerability_management
    if: success()
  
    steps:
      - name: Pull the latest Juice Shop docker image
        run: docker pull bkimminich/juice-shop
  
      - name: Deploy & Verify Juice Shop App working
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false
